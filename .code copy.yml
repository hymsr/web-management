branch:
  #主干，推荐命名为master
  trunk_name: "master"
  #分支类型A分支命名规范定义，若项目未使用该分支类型，请删除该类型的分支命名定义
  branch_type_A:
    personal_feature:
      pattern: "feature/${userID}_${storyID}"
      #userID,用户英文名，storyID为需求ID
    bugfix:
      pattern: "bugfix/${userID}_${bugID}"
    tag:
      pattern: "v${versionnumber}[${releasetype}[_${description}]{_yyyyMMddHHmm}]"
      #versionnumber特指版本号
      versionnumber: "versionnumber={Major-version}.{Feature-version}.{Fix-version}.{BuildNo}"
  #分支类型B分支命名规范定义，若项目未使用该分支类型，请删除该类型的分支命名定义
  branch_type_B:
    personal_feature:
      pattern: "feature/${userID}_${storyID}"
      #userID,用户英文名，storyID为需求ID
   #推荐命名规范为:fbugfix/[${parent-branch-descripton}_]{bug-descripton}_企业微信英文名
    bugfix:
      pattern: "bugfix/${userID}_${bugID}"
   #推荐命名规范为：release
    single_release:
      pattern: "release"
   #每次发布时需要单独拉出发布分支
    multiple_release:
      pattern: "release/[${versionname}][_${releasetype}[_${description}]]"
      #发布分支类型说明，推荐为：["rc","release"]
      releasetype: [rc,release]
    #补丁发布分支 可以是此次补丁发布的主要问题标识
    hotfix_release:
      pattern: "hotfix/[${versionname}][_${description}]"
    #推荐基线命名规范：
    tag:
      pattern: "v${versionnumber}[${releasetype}[_${description}]{_yyyyMMddHHmm}]"
      #versionnumber特指版本号
      versionnumber: "versionnumber={Major-version}.{Feature-version}.{Fix-version}.{BuildNo}"
  #分支类型C分支命名规范定义，若项目未使用该分支类型，请删除该类型的分支命名定义
  branch_type_C:
    share_features:
      pattern: "feature/share_${versionname}_${teamname}[_${descripton}]"
      #推荐versionname命名规范为: Major-version}.{Feature-version}.Fix-version
      versionname: "${Major-version}.${Feature-version}.${Fix-version}"
      # teamname样例 ["qzone","fpp","camera"]
      teamname: ["teamname1","teamname2","teamname3"]
    personal_feature:
      pattern: "feature/${teamname}_${userID}_${storyID}"
      #userID,用户英文名，storyID为需求ID
   #推荐命名规范为:fbugfix/[${parent-branch-descripton}_]{bug-descripton}_企业微信英文名
    bugfix:
      pattern: "bugfix/${teamname}_${userID}_${bugID}"
   #推荐命名规范为：release
    single_release:
      pattern: "release"
   #每次发布时需要单独拉出发布分支
    multiple_release:
      pattern: "release/[${versionname}][_${releasetype}[_${description}]]"
      #发布分支类型说明，推荐为：["rc","release"]
      releasetype: [rc,release]
    #补丁发布分支 可以是此次补丁发布的主要问题标识
    hotfix_release:
      pattern: "hotfix/[${versionname}][_${description}]"
    #推荐基线命名规范：
    tag:
      pattern: "v${versionnumber}[${releasetype}[_${description}]{_yyyyMMddHHmm}]"
      #versionnumber特指版本号
      versionnumber: "versionnumber={Major-version}.{Feature-version}.{Fix-version}.{BuildNo}"
#必选项，用于说明仓库对应发布单元发布制品以及依赖制品配置文件信息
artifact:
  #大仓的情况，可能不同目录是不同的发布单元,下面path指定代码仓库里相应发布单元目录
  #若整个仓库代码是一个发布单元，该path为当前目录
  - path: "/"
    #发布单元名称，如AndroidQQ、epc-demo
    artifact_name: "template-web"
    #发布单元类型，可选类型字段有，移动端/PC端/后台单体应用/后台微服务/web/sdk/lib/框架
    #比如发布单元为腾讯视频Android客户端，则发布单元类型为如下样例 移动端
    artifact_type: "web"
 
    #提供产品发布单元发布制品归档地址
    #地址定义说明详见：https://git.code.oa.com/epcm/new_epc_tmp/blob/master/0F.artifacts-release-spec.md
    repository_url: ""
 
    # 提供产品依赖制品配置文件，推荐产品项目编译过程依赖制品配置统一至一个文件中，或相同文件名中
    # 如Android端将所有build.gralde需要依赖的制品统一至：common.grale
    # 如pod引入依赖的项目指定项目Podfile.lock
    dependence_conf: "package.json"
 
#可选项，需要定义区分不同类别代码时才需要配置source
source:
  # 文件或目录使用绝对路径，绝对路径按代码库根目录计算，以/开头.
  # 提供产品代码库中编写的测试代码存放目录或文件名格式,以便后续代码统计环节进行排除等特殊处理
  test_source:
    #用于匹配文件; 匹配方式为正则表达式
    filepath_regex: [".*/.*.test.js"]
 
  # 提供产品代码库中工具或框架自动生成的且在代码库中的代码，没有可为空。以便后续代码统计环节进行排除等特殊处理。
  auto_generate_source:
  # 自动生成代码文件的正则表达式，若无统一标识格式，可以指定具体目录，样例可参考test_source举例
    filepath_regex: []
 
  # 提供产品代码库中直接以源码形式存在的第三方代码目录或代码文件名的正则表达。
  # 此处备注的第三方代码在后续统计代码量环节会被排除，若代码库中不存在需要排除的第三方代码，该项配置标识可为空
  third_party_source:
    #第三方代码文件的正则表达式，若无统一标识格式，可以指定具体目录，样例可参考test_source举例
    filepath_regex: ["/example/.*"]
 
#可选项，针对整个项目默认代码评审配置，未填写时读取对应仓库在工蜂平台对应配置
code_review:
  #定义产品工蜂cr的评论标签，以下是给出的推荐标签分类
  restrict_labels: ["CR-编程规范", "CR-业务逻辑","CR-边界逻辑","CR-代码架构","CR-性能影响","CR-安全性","CR-可测试性","CR-可读性"]
  #评审人
  reviewers: ["lynxyan"]
  #必要评审人
  necessary_reviewers: ["lynxyan"]
 
#自定义文件或目录owner和代码评审配置
# 文件或目录可使用绝对或相对路径，绝对路径按代码库根目录计算，以/开头。相对路径按.code.yml所在目录来判断，以 ./开头
file :
  - path: ".*"
    #必填项，文件负责人
    owners :  ["lynxyan"]
    #必填项，文件负责人通过规则可选值 -1,0,大于等于1的整数;
    #-1,表示需所有owner审批；
    #0，表示该文件无需任意一个owner审批;
    #用大于等于1的整数，表示需要相应整数个的owner审批该路径，比如2，标识需要任意两个owners审批
    owner_rule: 1
    #以下code_review为可选项，该项表示路径评审，但评审是针对整个CR单，非owner机制中只评审单个文件
    code_review:
      reviewers :  []
      necessary_reviewers :  []